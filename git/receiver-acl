#!/usr/bin/node
var mongodb = require('mongodb');
var _ = require('lodash');
var Q = require('q');
var uuid = require('uuid');
var Queue = require('../mongo-queue');
var Logger = require('../mongo-queue/logger');
var analytics = require('../mongo-queue/analytics');
var logger = new Logger('git');
var request = require('request');
var exec = require('child_process').exec;

var password = 'vH$qBF{pZg(qnh8jpWzp9y[@[[D@(_%/t@j5^zMC6Wcf,vHeN!vdcN!(3m6Pj7jP';

logger.log('Arguments', process.argv);
var command = process.argv[2];
var repoName = process.argv[3];
var username = process.argv[4];
var beforeCommit = process.argv[5];
var afterCommit = process.argv[6];

Q.ninvoke(request, 'post', 'https://doskara.herokuapp.com/repositories/canpush.json', {
  form: {
    repository: {
      name: repoName,
      username: username
    }
  }
}).spread(function(response, body) {
  logger.log('Body', body);
  var body = JSON.parse(body);
  if(body.success) {
    logger.log('BodySuccess', body);
    if(command === 'write') {
      // Check if non-fast forward
      var isBeginning = beforeCommit === _.times(40, function() { return '0'; }).join('');
      return Q.fcall(function() {
        if(!isBeginning) {
          return Q.nfcall(exec, 'git log --pretty=oneline ' + afterCommit + '..' + beforeCommit)
          .then(function(ls) {
            if(ls[0].length) {
              throw new Error('FastForwardOnly');
            }
          });
        }
      }).then(function() {
        if(body.type === 'cell') {
          analytics.log('atoms', body.id, false);
          console.log('Got atom, saving info... Process: ' + logger.id);
          var commitDot = isBeginning ? afterCommit : beforeCommit + '..' + afterCommit;
          return Q.nfcall(exec, 'git log --pretty=format:"%H|||%an|||%ad|||%s" --reverse ' + commitDot)
          .spread(function(commits) {
            commits = commits.split('\n').map(function(commit) {
              var commitData = commits.split('|||');
              return {
                commit_hash: commitData[0],
                author: commitData[1],
                date: commitData[2],
                message: commitData.slice(3).join(' ')
              };
            });
            logger.log('PushAttempt', commits);
            return Q.ninvoke(request, 'post', 'https://doskara.herokuapp.com/repositories/push.json', {
              form: {
                repository: {
                  id: body.id,
                  commits: commits
                },
                password: password
              }
            });
          }).then(function() {
            console.log('Success! Now go to http://app.doskara.com/cells/' +
              body.id + ' to publish your app!');
          });
        } else if(body.type === 'application') {
          console.log('Got structure... Process: ' + logger.id);
          analytics.log('structures', body.id, false);
          var atomName = repoName.substring(0, repoName.length - '.git'.length);
          return Queue.uploadFile(process.stdin, logger).then(function(gs, filename) {
            var readStream = Queue.getReadStream(function(message) {
              console.log(message);
            });
            console.log('Sending to factory...');
            logger.log('BuildEmit');
            return Queue.emitWithResponse({
              event: 'build',
              name: atomName,
              id: readStream.streamId,
              version: '',
              loggerId: logger.id,
              filename: filename
            }).then(function() {
              console.log('Build successful! Deploying dyno...');
              logger.log('DeployEmit');
              return Queue.emitWithResponse({
                event: 'deploy',
                name: atomName,
                loggerId: logger.id,
                id: readStream.streamId
              }).then(function() {
                readStream.stop();
                logger.log('Success');
                console.log('Success! Now you can view your app at https://' +
                  atomName + '.gateway.doskara.com!');
              });
            });
          });
        }
      });
    }
  } else {
    logger.log('BodyError', body.error);
    throw new Error(body.error);
  }
}).catch(function(err) {
  if(command === 'write') console.log(err, err.stack);
  logger.log('End Error', err, err.stack);
  return 1;
}).then(function(code) {
  return logger.finish().finally(function() {
    process.exit(code);
  });
});
