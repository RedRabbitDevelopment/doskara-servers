#!/bin/bash

GITUSER=${GITUSER:-git}
GITHOME="/home/$GITUSER"
SELF=`which $0`


case "$1" in
# Public commands

  init) # gitreceive init
    useradd -d $GITHOME $GITUSER || true
    mkdir -p $GITHOME/.ssh
    touch $GITHOME/.ssh/authorized_keys
    cat > $GITHOME/receiver2 <<EOF
#!/usr/bin/ruby
require 'net/http'

require 'rubygems'
require 'json'

# command line
@command = ARGV[0]
@repo_name = ARGV[1]
@username = ARGV[2]

# Error Types
module Errors
  SUCCESS = 0
  INVALID_REPOSITORY = 1
  NO_ACCESS = 2
  BUILD_ERROR = 3
  DEPLOY_ERROR = 4
  SAVE_ERROR = 5
  UNKNOWN_ERROR = 6
  NON_FAST_FORWARD = 7
end
# Request details
class Requester
  @@host = "doskara.herokuapp.com"
  @@port = 80
  @@push_url = '/repositories/push.json'
  @@canpush_url = '/repositories/canpush.json'
  def initialize(repo_name)
    @repo_name = repo_name
  end
  def post(url, payload)
    req = Net::HTTP::Post.new(url, initheader = {'Content-Type' => 'application/json'})
    req.body = payload
    response = Net::HTTP.new(@@host, @@port).start {|http| http.request(req)}
    JSON.parse(response.body)
  end
  def canpush(repo_name, username)
    payload = {
      :repository => {
        :name => @repo_name,
        :username => username
      }
    }.to_json
    post @@canpush_url, payload
  end
  def push(commits)
    payload = {
      :repository => {
        :name => @repo_name,
        :commits => commits
      }
    }
    post @@push_url, payload
  end
end
class Logger
  @@file = './receiver.log'
  def initialize(type)
    @rd, @wr = IO.pipe
    @type = type
  end
  def wr
    @wr
  end
  def close
    @wr.close
    @handle = File.open @@file, 'a'
    result = @rd.read
    @rd.close
    if result.length > 0
      @handle.write "#{@type}Error: #{Time.new.inspect}\n"
      @handle.write "#{result}\n"
    end
    @handle.close
  end
end
    

# handle response
requester = Requester.new @repo_name
response = requester.canpush @username
if response['error'] == 'InvalidRepository'
  exit Errors.INVALID_REPOSITORY
elsif response['error'] == 'NoAccess'
  exit Errors.NO_ACCESS
elsif not response['success']
  exit Errors.UNKNOWN_ERROR
else
  # Send to factory
  if @command == 'write'
    # Check if non-fast-forward
    missed_refs = exec("git log --pretty=oneline #{ARGV[4]}..#{ARGV[3]}").split("\n")
    if missed_refs.size > 0
      puts '[POLICY] Cannot push a non fast-forward reference'
      exit Errors.NON_FAST_FORWARD
    end
    if response['type'] == 'cell'
      # Send saved commits to web portal
      commits = exec("git log --pretty=oneline #{ARGV[3]}..#{ARGV[4]}").split("\n")
      commits = commits.map do |commit|
        split = commit.index ' '
        [commit[0..split - 1], commit[split + 1..-1]
      end
      response = requester.push commits
      logger = Logger.new 'SaveData'
      logger.wr.write response['error'] if response.has_key? 'error'
      logger.close
      exit response['success'] ? Errors.SUCCESS : Errors.SAVE_ERROR
    elsif response['type'] == 'project'
      # Build
      command = "ssh factory \"/usr/local/doskara/build.sh #{@repo_name}\""
      logger = Logger.new 'Build'
      result = system(command, out: $stdout, err: logger.wr, in: $stdin)
      logger.close
      exit Errors.BUILD_ERROR unless result
      # Deploy
      command = "ssh warden \"/usr/local/doskara/deploy.sh #{@repo_name}\""
      logger = Logger.new 'Deploy'
      result = system(command, out: $stdout, err: logger.wr, in: $stdin)
      logger.close
      exit result ? Errors.SUCCESS : Errors.DEPLOY_ERROR
    end
  end
  exit Errors.SUCCESS
end
EOF
    chmod +x $GITHOME/receiver
    chown -R $GITUSER $GITHOME
    # authenticating server
    echo "Creating public key for server access"
    KEY=$(cat)
    COMMAND="command=\"$SELF proxy-upload-key\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding,no-port-forwarding"
    $SELF edit-authorized "$COMMAND" "$KEY"
    echo "Created receiver script in $GITHOME for user '$GITUSER'."
    ;;

  edit-authorized) # sudo gitreceive edit-authorized <command> <key>
    echo "Editing authorized"
    AUTHORIZED_KEYS=$GITHOME/.ssh/authorized_keys
    COMMAND=$2
    KEY=$3
    echo "$COMMAND $KEY" >> $AUTHORIZED_KEYS
    ;;

  upload-key) # sudo gitreceive upload-key <username>
    echo "uploading key"
    KEY=$(cat)
    USERNAME=$2
    
    FINGERPRINT=$(ssh-keygen -lf /dev/stdin <<< $(echo $KEY) | awk '{print $2}')
    # When this key is used, use the ssh 'forced command' feature to have 'gitreceive run' to run instead.
    KEY_PREFIX="command=\"$SELF run $USERNAME $FINGERPRINT\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding,no-port-forwarding"
    $SELF edit-authorized "$KEY_PREFIX" "$KEY"
    echo $FINGERPRINT
    ;;

# Internal commands
  run) 
    export RECEIVE_USER=$2
    export RECEIVE_FINGERPRINT=$3
    # ssh provides the original requested command in $SSH_ORIGINAL_COMMAND
    export RECEIVE_REPO="$(echo $SSH_ORIGINAL_COMMAND | awk '{print $2}' | perl -pe 's/(?<!\\)'\''//g' | sed 's/\\'\''/'\''/g')"
    # Getting rid of red text: '
    if [ "$RECEIVE_REPO" != "" ] || [ "$RECEIVE_USER" != "" ] ; then
      $GITHOME/receiver-acl read "$RECEIVE_REPO" "$RECEIVE_USER"
      rc=$?
      if [[ $rc != 0 ]] ; then
        exit $rc
      fi
      REPO_PATH="$GITHOME/$RECEIVE_REPO"
      if [ ! -d $REPO_PATH ]; then
        mkdir -p $REPO_PATH
        cd $REPO_PATH
        git init --bare > /dev/null
      fi
      cd $GITHOME
      PRERECEIVE_HOOK="$REPO_PATH/hooks/pre-receive"
      POSTRECEIVE_HOOK="$REPO_PATH/hooks/post-receive"
      cat > $PRERECEIVE_HOOK <<EOF
#!/bin/bash
cat | $SELF pre-hook
EOF
    chmod +x $PRERECEIVE_HOOK
    cat > $POSTRECEIVE_HOOK <<EOF
#!/bin/bash
cat | $SELF post-hook
EOF
      chmod +x $POSTRECEIVE_HOOK
      git-shell -c "$SSH_ORIGINAL_COMMAND"
    else
      echo "No user or repo designated"
    fi
    ;;

  pre-hook)
    # "
    while read oldrev newrev refname
    do
      # Read/Write access are the same 
      git archive $newrev | $GITHOME/receiver-acl write "$RECEIVE_REPO" "$RECEIVE_USER" "$oldrev" "$newrev"
      rc=$?
      if [[ $rc != 0 ]] ; then
        echo "      ERROR: failed on rev $newrev - push denied"
        exit $rc
      fi
    done
    #exit 1 # for debugging
    ;;

  post-hook)
    # Nothing yet
    ;;

  *)
    echo "Usage: gitreceive <command> [options]"
    ;;
esac
